<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/context
	   		http://www.springframework.org/schema/context/spring-context-3.0.xsd
	   		http://www.springframework.org/schema/task
			http://www.springframework.org/schema/task/spring-task-3.0.xsd">

	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- Activates various annotations to be detected in bean classes -->
	<context:component-scan base-package="com.spring3.mvc.service" />
	<context:component-scan base-package="com.spring3.mvc.dao.hibernate" />
	<context:component-scan base-package="com.spring3.mvc.util" />

	<!-- Activates @Async annotations for scheduling -->
	<task:annotation-driven executor="executorWithPoolSizeRange" />

	<!-- The 'executor' element: When a task is submitted, the executor will 
		first try to use a free thread if the number of active threads is currently 
		less than the core size. If the core size has been reached, then the task 
		will be added to the queue as long as its capacity has not yet been reached. 
		Only then, if the queue's capacity has been reached, will the executor create 
		a new thread beyond the core size. If the max size has also been reached, 
		then the executor will reject the task See: 25.4.2 The 'executor' element -->
	<!-- Defines a ThreadPoolTaskExecutor instance with configurable pool size, 
		queue-capacity, keep-alive, and rejection-policy values. The id becomes the 
		default thread name prefix -->
	<!-- <task:executor id="executorWithPoolSizeRange" pool-size="5-25"
		queue-capacity="100" /> -->

</beans>
